python
複製程式碼
import sys

# 定义一个函数来处理并打印 sys.argv 内容
def print_sys_argv():
    # 打印 sys.argv 列表中的所有项
    for index, arg in enumerate(sys.argv):
        print(f"sys.argv[{index}] = {arg}")

# 调用函数来显示 sys.argv 的内容
print_sys_argv()
假设你将上面的代码保存为 script.py，以下是一些示例如何使用不同的命令行参数运行脚本：

没有任何脚本名称和引数：
bash
複製程式碼
python script.py
输出:

css
複製程式碼
sys.argv[0] = script.py
脚本名称为 -（标准输入）：
bash
複製程式碼
python - < script.py
输出:

css
複製程式碼
sys.argv[0] = -
使用 -c command：
bash
複製程式碼
python -c "import sys; print(sys.argv)" arg1 arg2
输出:

css
複製程式碼
['-c', 'arg1', 'arg2']
使用 -m module：
假设有一个模块 example_module，其内容与上面的 script.py 相同。

bash
複製程式碼
python -m example_module arg1 arg2
输出:

css
複製程式碼
sys.argv[0] = /path/to/example_module.py
sys.argv[1] = arg1
sys.argv[2] = arg2
通过以上示范，你可以看到 sys.argv 是如何根据不同的运行方式来存储脚本名称和引数的。这种方式在编写需要处理命令行参数的 Python 脚本时非常有用。






-------------------------------


如果不使用預設編碼，則要聲明檔案的編碼，檔案的第一行要寫成特殊註解。語法如下：

# -*- coding: encoding -*-
encoding: cp1252, iso-8859-1, utf-8
如果不指定則會以UTF-8為預設編碼


----------------------------


ython 還支援了其他的數字型態，包含 Decimal 和 Fraction。Python 亦內建支援複數 (complex numbers)，並使用 j 和 J 後綴來指定虛數的部份（即 3+5j）。



-----------------------------

切片索引 (slice indices) 有很常用的預設值，省略起點索引值時預設為 0，而省略第二個索引值時預設整個字串被包含在 slice 中：

word[:2]   # character from the beginning to position 2 (excluded)
'Py'
word[4:]   # characters from position 4 (included) to the end
'on'
word[-2:]  # characters from the second-last (included) to the end
'on'
注意到起點永遠被包含，而結尾永遠不被包含。這確保了 s[:i] + s[i:] 永遠等於 s


裡有個簡單記住 slice 是如何運作的方式。想像 slice 的索引值指著字元們之間，其中第一個字元的左側邊緣由 0 計數。則 n 個字元的字串中最後一個字元的右側邊緣會有索引值 n，例如：

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1


------------------------------

id()
help()
dir()
內建函式 dir() 用於找出模組定義的所有名稱。它回傳一個排序後的字串 list
它列出所有類型的名稱：變數、模組、函式
import builtins
dir(builtins)
列出內建函式和變數的名稱
------------------------------

說明文件字串 (Documentation Strings)

第一行都是一段關於此物件目的之簡短摘要
文件字串為多行時，第二行應為空白行，在視覺上將摘要與其餘描述分開

def my_function():
    """Do nothing, but document it.

    No, really, it doesn't do anything.
    """
    pass

print(my_function.__doc__)
Do nothing, but document it.

    No, really, it doesn't do anything.
    
    
---------------------------------


函式註釋 (Function Annotations)
函式註釋是選擇性的元資料（metadata）資訊，描述使用者定義函式所使用的型別

註釋以 dictionary（字典）的形式存放在函式的 __annotations__ 屬性中，且不會影響函式的任何其他部分。參數註釋的定義方式是在參數名稱後加一個冒號，冒號後面跟著一個對註釋求值的運算式。回傳註釋的定義方式是在參數列表和 def 陳述式結尾的冒號中間，用一個 -> 文字接著一個運算式

def f(ham: str, eggs: str = 'eggs') -> str:
    print("Annotations:", f.__annotations__)
    print("Arguments:", ham, eggs)
    return ham + ' and ' + eggs

f('spam')



------------------------------
from collections import deque
被設計成可以快速從頭尾兩端加入與取出資料


------------------------------

List Comprehensions（串列綜合運算）

squares = []
for x in range(10):
    squares.append(x**2)

squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]


squares = list(map(lambda x: x**2, range(10)))

squares = [x**2 for x in range(10)]




combs = []
for x in [1,2,3]:
    for y in [3,1,4]:
        if x != y:
            combs.append((x, y))

combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]    






matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
]


[[row[i] for row in matrix] for i in range(4)]



list(zip(*matrix))


----------------------------

有一個方法可以藉由索引而不是值來刪除 list 中的項目：del 陳述式

del 也可以用來刪除整個變數






------------------------------
List Comprehensions（串列綜合運算）
set
dictionary

tuple
巢狀的 List Comprehensions
list(zip(*matrix))
----------------------------

（walrus operator），其符號為 :=。海象運算子允許你在表達式中對變數進行賦值

# 傳統的方式
data = input("請輸入數據: ")
while data != "quit":
    print(f"你輸入了: {data}")
    data = input("請輸入數據: ")

# 使用海象運算子
while (data := input("請輸入數據: ")) != "quit":
    print(f"你輸入了: {data}")
    
    
    
------------------------------

模組名稱列在 sys.builtin_module_names 當中。如果找不到，接下來會在變數 sys.path 所給定的資料夾清單之中，搜尋一個名為 spam.py 的檔案。sys.path 從這些位置開始進行初始化：

輸入腳本所位在的資料夾（如未指定檔案時，則是當前資料夾）。

PYTHONPATH（一連串和 shell 變數 PATH 的語法相同的資料夾名稱）。

與安裝相關的預設值（按慣例會包含一個 site-packages 資料夾，它是由 site 模組所處理）。



為了加快載入模組的速度，Python 將每個模組的編譯版本暫存在 __pycache__ 資料夾下，並命名為 module.version.pyc， 這裡的 version 是編譯後的檔案的格式名稱，且名稱通常會包含 Python 的版本編號。例如，在 CPython 3.3 中，spam.py 的編譯版本將被暫存為 __pycache__/spam.cpython-33.pyc。此命名準則可以讓來自不同版本的編譯模組和 Python 的不同版本同時共存。

--------------------------------

要使用格式化字串文本 (formatted string literals)，需在字串開始前的引號或連續三個引號前加上 f 或 F。你可以在這個字串中使用 { 與 } 包夾 Python 的運算式，引用變數或其他字面值 (literal values)。

>>>
year = 2016
event = 'Referendum'
f'Results of the {year} {event}'
'Results of the 2016 Referendum'


字串的 str.format() method 需要更多手動操作。你還是可以用 { 和 } 標示欲替代變數的位置，且可給予詳細的格式指令

yes_votes = 42_572_654
total_votes = 85_705_149
percentage = yes_votes / total_votes
'{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)

 repr()原始字符串形式 或 str()會被轉譯 函式把任何的值轉換為字串
 
 
 
 str(): 更加关注用户的可读性，适用于显示给最终用户的内容。
repr(): 更加关注代码的精确描述，适用于调试和开发阶段。


 class MyClass:
    def __str__(self):
        return 'This is MyClass object'
    
    def __repr__(self):
        return 'MyClass()'

obj = MyClass()
print(str(obj))  # 输出: This is MyClass object
print(repr(obj)) # 输出: MyClass()

 
 -------------------------------------
 
 
 格式化的字串文本 (Formatted String Literals)
 
 
 格式說明符 (format specifier) 是選擇性的，寫在運算式後面，可以更好地控制值的格式化方式。以下範例將 pi 捨入到小數點後三位：

>>>
import math
print(f'The value of pi is approximately {math.pi:.3f}.')

在 ':' 後傳遞一個整數，可以設定該欄位至少為幾個字元寬，常用於將每一欄對齊。

>>>
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
for name, phone in table.items():
    print(f'{name:10} ==> {phone:10d}')

Sjoerd     ==>       4127
Jack       ==>       4098
Dcab       ==>       7678
還有一些修飾符號可以在格式化前先將值轉換過。'!a' 會套用 ascii()，'!s' 會套用 str()，'!r' 會套用 repr()：

>>>
animals = 'eels'
print(f'My hovercraft is full of {animals}.')
My hovercraft is full of eels.
print(f'My hovercraft is full of {animals!r}.')
My hovercraft is full of 'eels'.
= 說明符可用於將一個運算式擴充為該運算式的文字、一個等號、以及對該運算式求值 (evaluate) 後的表示法：

>>>
bugs = 'roaches'
count = 13
area = 'living room'
print(f'Debugging {bugs=} {count=} {area=}')
Debugging bugs='roaches' count=13 area='living room'


---------------------------------

字串的 format() method

大括號及其內的字元（稱為格式欄位）會被取代為傳遞給 str.format() method 的物件。大括號中的數字表示該物件在傳遞給 str.format() method 時所在的位置。

>>>
print('{0} and {1}'.format('spam', 'eggs'))
spam and eggs
print('{1} and {0}'.format('spam', 'eggs'))
eggs and spam
如果在 str.format() method 中使用關鍵字引數，可以使用引數名稱去引用它們的值。

>>>
print('This {food} is {adjective}.'.format(
      food='spam', adjective='absolutely horrible'))
This spam is absolutely horrible.
位置引數和關鍵字引數可以任意組合：

>>>
print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                   other='Georg'))
The story of Bill, Manfred, and Georg.
如果你有一個不想分割的長格式化字串，比較好的方式是按名稱而不是按位置來引用變數。這項操作可以透過傳遞字典 (dict)，並用方括號 '[]' 使用鍵 (key) 來輕鬆完成。

>>>
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
      'Dcab: {0[Dcab]:d}'.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
用 '**' 符號，把 table 字典當作關鍵字引數來傳遞，也有一樣的結果。

>>>
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
與內建函式 vars() 組合使用時，這種方式特別實用。該函式可以回傳一個包含所有區域變數的 dictionary：

>>>
table = {k: str(v) for k, v in vars().items()}
message = " ".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])
print(message.format(**table))
__name__: __main__; __doc__: None; __package__: None; __loader__: ...

---------------------------------




手動格式化字串


下面是以手動格式化完成的同一個平方及立方的表：

>>>
for x in range(1, 11):
    print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
    # Note use of 'end' on previous line
    print(repr(x*x*x).rjust(4))
    
    
    字串物件的 str.rjust() method 透過在左側填補空格，使字串以給定的欄寬進行靠右對齊。類似的 method 還有 str.ljust() 和 str.center()
    
    另一種 method 是 str.zfill()，可在數值字串的左邊填補零，且能識別正負號：

>>>
'12'.zfill(5)
'00012'
'-3.14'.zfill(7)
'-003.14'
'3.14159265359'.zfill(5)


-------------------------------------


格式化字串的舊方法

% 運算子（modulo，模數）也可用於字串格式化。在 format % values 中（其中 format 是個字串），format 內的 % 轉換規格會被 values 的零個或多個元素所取代。此運算常被稱為字串插值 (string interpolation)。例如：

>>>
import math
print('The value of pi is approximately %5.3f.' % math.pi)



------------------------------------


使用 json 儲存結構化資料


import json
x = [1, 'simple', 'list']
json.dumps(x)

dumps() 函式有一個變體，稱為 dump()，它單純地將物件序列化為 text file。因此，如果 f 是一個為了寫入而開啟的 text file 物件，我們可以這樣做：

json.dump(x, f)
若 f 是一個已開啟、可讀取的 binary file 或 text file 物件，要再次解碼物件的話：

x = json.load(f)
備註 JSON 檔案必須以 UTF-8 格式編碼。在開啟 JSON 檔案以作為一個可讀取與寫入的 text file 時，要用 encoding="utf-8"。
這種簡單的序列化技術可以處理 list 和 dictionary，但要在 JSON 中序列化任意的 class（類別）實例，則需要一些額外的工作。json 模組的參考資料包含對此的說明。


---------------------------------

 pickle - pickle 模組
與 JSON 不同，pickle 是一種允許對任意的複雜 Python 物件進行序列化的協定。因此，它為 Python 所特有，不能用於與其他語言編寫的應用程式溝通。在預設情況，它也是不安全的：如果資料是由手段高明的攻擊者精心設計，將這段來自於不受信任來源的 pickle 資料反序列化，可以執行任意的程式碼

--------------------------------

 exec() 或 eval() 
 
 --------------------------------
 
 
 使用py_Freeze編譯成exe檔案
 
 使用stdin stdout stderr實作
 
 與 dir /B | *.py > test.txt
 
 也可以帶入import sys, import argparse
 不要用Pycharm的terminal操作,直接用windows command
 
 當然你也是可以使用dir /B|python *.py
 
 
 ------------------------------
 
import glob 來查找資料夾內的JSON檔案並合併
 讀取寫入JSON,XML,CSV檔案

 
 
 